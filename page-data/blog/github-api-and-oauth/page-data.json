{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-js","path":"/blog/github-api-and-oauth/","result":{"data":{"markdownRemark":{"html":"<p>GitHub的API可以说是Web API设计的典范，仅仅是阅读文档就让人获益良多，时刻为你的Web知识及HTTP协议查漏补缺。</p>\n<p>GitHub API大部分接口都需要认证，而其主要推荐的认证方式是OAuth。OAuth的接入也分好几种，根据不同的应用场景：</p>\n<ul>\n<li>如果你的应用允许/需要用户登录自己的GitHub账号\n<ul>\n<li>对于Web应用：<a href=\"https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps#web-application-flow\">基于OAuth的Web application flow</a></li>\n<li>对于命令行或其他设备：<a href=\"https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps#device-flow\">基于OAuth的Device flow</a></li>\n</ul>\n</li>\n<li>如果你的应用只需要单一/固定的GitHub账号的权限，比如你自己的账号：\n<ul>\n<li>适用于服务端：<a href=\"https://docs.github.com/en/rest/overview/other-authentication-methods#via-oauth-and-personal-access-tokens\">OAuth and personal access tokens</a></li>\n</ul>\n</li>\n</ul>\n<h2>Web Application Flow</h2>\n<ol>\n<li>应用将用户重定向到GitHub登录页，用户在GitHub上登录</li>\n<li>GitHub将用户重定向回应用站点，重定向回来时候会带上一个code。应用可以通过这个临时code，在10分钟内兑换access_token。</li>\n<li>应用站点保存access_token，并在之后所有针对GitHub API的请求带上该token</li>\n</ol>\n<h2>Device Flow</h2>\n<ol>\n<li>命令行应用调用Github拿到认证链接和用于识别当前应用的验证码，验证码15分钟失效。</li>\n<li>命令行应用将验证码展示给用户，并提示用户去认证链接输入该验证码。</li>\n<li>命令行应用轮询GitHub检查用户是否已经输入了验证码（命令行授权）。用户输入成功后，即可拿到access_token。</li>\n</ol>\n<h2>OAuth and Personal Access Tokens</h2>\n<p>按照<a href=\"https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token\">教程</a>，\n在Settings - Developer settings - personal access tokens页面自主添加即可。注意添加成功后，只有在当时token可见，\n一旦页面关闭之后就再也拿不到这个token了，一定记得保存好。</p>\n<p>Personal Access Token相比直接用登录密码的好处在于：</p>\n<ul>\n<li>更细粒度的权限控制，可以勾选该Token可以访问的API，读写控制</li>\n<li>Token随时可以删除，也可以设置失效时间，到期自动失效</li>\n</ul>\n<h2>有了Token之后怎么用</h2>\n<h3>方案一：Basic Authentication</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-u</span> username:token https://api.github.com</code></pre></div>\n<h3>方案二：OAuth token (sent in a header)</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Authorization: token OAUTH-TOKEN\"</span> https://api.github.com</code></pre></div>","rawMarkdownBody":"\nGitHub的API可以说是Web API设计的典范，仅仅是阅读文档就让人获益良多，时刻为你的Web知识及HTTP协议查漏补缺。\n\nGitHub API大部分接口都需要认证，而其主要推荐的认证方式是OAuth。OAuth的接入也分好几种，根据不同的应用场景：\n\n- 如果你的应用允许/需要用户登录自己的GitHub账号\n  - 对于Web应用：[基于OAuth的Web application flow](https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps#web-application-flow)\n  - 对于命令行或其他设备：[基于OAuth的Device flow](https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps#device-flow)\n- 如果你的应用只需要单一/固定的GitHub账号的权限，比如你自己的账号：\n  - 适用于服务端：[OAuth and personal access tokens](https://docs.github.com/en/rest/overview/other-authentication-methods#via-oauth-and-personal-access-tokens)\n\n\n## Web Application Flow\n1. 应用将用户重定向到GitHub登录页，用户在GitHub上登录\n2. GitHub将用户重定向回应用站点，重定向回来时候会带上一个code。应用可以通过这个临时code，在10分钟内兑换access_token。\n3. 应用站点保存access_token，并在之后所有针对GitHub API的请求带上该token\n\n## Device Flow\n1. 命令行应用调用Github拿到认证链接和用于识别当前应用的验证码，验证码15分钟失效。\n2. 命令行应用将验证码展示给用户，并提示用户去认证链接输入该验证码。\n3. 命令行应用轮询GitHub检查用户是否已经输入了验证码（命令行授权）。用户输入成功后，即可拿到access_token。\n\n## OAuth and Personal Access Tokens\n按照[教程](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token)，\n在Settings - Developer settings - personal access tokens页面自主添加即可。注意添加成功后，只有在当时token可见，\n一旦页面关闭之后就再也拿不到这个token了，一定记得保存好。\n\nPersonal Access Token相比直接用登录密码的好处在于：\n- 更细粒度的权限控制，可以勾选该Token可以访问的API，读写控制\n- Token随时可以删除，也可以设置失效时间，到期自动失效\n\n## 有了Token之后怎么用\n\n### 方案一：Basic Authentication\n```bash\ncurl -u username:token https://api.github.com\n```\n\n### 方案二：OAuth token (sent in a header)\n```bash\ncurl -H \"Authorization: token OAUTH-TOKEN\" https://api.github.com\n```\n","frontmatter":{"date":"September 22, 2021","slug":"/blog/github-api-and-oauth/","title":"GitHub API与OAuth认证","excerpt":"选择适合你的认证方式","image":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/b5899b93147f962a4c74c82c07471968/221c0/github_api.png","srcSet":"/static/b5899b93147f962a4c74c82c07471968/97aa7/github_api.png 169w,\n/static/b5899b93147f962a4c74c82c07471968/a9084/github_api.png 338w,\n/static/b5899b93147f962a4c74c82c07471968/221c0/github_api.png 676w","sizes":"(min-width: 676px) 676px, 100vw"},"sources":[{"srcSet":"/static/b5899b93147f962a4c74c82c07471968/60010/github_api.webp 169w,\n/static/b5899b93147f962a4c74c82c07471968/8d832/github_api.webp 338w,\n/static/b5899b93147f962a4c74c82c07471968/cae60/github_api.webp 676w","type":"image/webp","sizes":"(min-width: 676px) 676px, 100vw"}]},"width":676,"height":419}}}}}},"pageContext":{"id":"0544f1b0-e3ab-54b6-8381-620887ea5dc8","frontmatter__slug":"/blog/github-api-and-oauth/","__params":{"frontmatter__slug":"blog"}}},"staticQueryHashes":[]}