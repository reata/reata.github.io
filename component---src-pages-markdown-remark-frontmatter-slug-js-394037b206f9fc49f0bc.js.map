{"version":3,"file":"component---src-pages-markdown-remark-frontmatter-slug-js-394037b206f9fc49f0bc.js","mappings":"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","sources":["webpack://reata-s-blog/./node_modules/@mui/system/esm/createBox.js","webpack://reata-s-blog/./node_modules/@mui/material/esm/Box/Box.js","webpack://reata-s-blog/./node_modules/@mui/material/esm/styles/getOverlayAlpha.js","webpack://reata-s-blog/./node_modules/@mui/material/esm/Paper/paperClasses.js","webpack://reata-s-blog/./node_modules/@mui/material/esm/Paper/Paper.js","webpack://reata-s-blog/../src/image-utils.ts","webpack://reata-s-blog/../src/components/hooks.ts","webpack://reata-s-blog/../src/components/picture.tsx","webpack://reata-s-blog/../src/components/layout-wrapper.tsx","webpack://reata-s-blog/../src/components/placeholder.tsx","webpack://reata-s-blog/../src/components/main-image.tsx","webpack://reata-s-blog/../src/components/gatsby-image.browser.tsx","webpack://reata-s-blog/../src/components/gatsby-image.server.tsx","webpack://reata-s-blog/../src/components/static-image.server.tsx","webpack://reata-s-blog/../src/components/static-image.tsx","webpack://reata-s-blog/./node_modules/gatsby-plugin-image/node_modules/camelcase/index.js","webpack://reata-s-blog/./node_modules/@giscus/react/dist/index.js","webpack://reata-s-blog/./src/pages/{MarkdownRemark.frontmatter__slug}.js","webpack://reata-s-blog/./src/utils/readingTime.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"component\"];\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport styled from '@mui/styled-engine';\nimport defaultStyleFunctionSx, { extendSxProp } from './styleFunctionSx';\nimport useTheme from './useTheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function createBox(options = {}) {\n  const {\n    defaultTheme,\n    defaultClassName = 'MuiBox-root',\n    generateClassName,\n    styleFunctionSx = defaultStyleFunctionSx\n  } = options;\n  const BoxRoot = styled('div', {\n    shouldForwardProp: prop => prop !== 'theme' && prop !== 'sx' && prop !== 'as'\n  })(styleFunctionSx);\n  const Box = /*#__PURE__*/React.forwardRef(function Box(inProps, ref) {\n    const theme = useTheme(defaultTheme);\n    const _extendSxProp = extendSxProp(inProps),\n      {\n        className,\n        component = 'div'\n      } = _extendSxProp,\n      other = _objectWithoutPropertiesLoose(_extendSxProp, _excluded);\n    return /*#__PURE__*/_jsx(BoxRoot, _extends({\n      as: component,\n      ref: ref,\n      className: clsx(className, generateClassName ? generateClassName(defaultClassName) : defaultClassName),\n      theme: theme\n    }, other));\n  });\n  return Box;\n}","import { createBox } from '@mui/system';\nimport PropTypes from 'prop-types';\nimport { unstable_ClassNameGenerator as ClassNameGenerator } from '../className';\nimport { createTheme } from '../styles';\nconst defaultTheme = createTheme();\nconst Box = createBox({\n  defaultTheme,\n  defaultClassName: 'MuiBox-root',\n  generateClassName: ClassNameGenerator.generate\n});\nprocess.env.NODE_ENV !== \"production\" ? Box.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Box;","// Inspired by https://github.com/material-components/material-components-ios/blob/bca36107405594d5b7b16265a5b0ed698f85a5ee/components/Elevation/src/UIColor%2BMaterialElevation.m#L61\nconst getOverlayAlpha = elevation => {\n  let alphaValue;\n  if (elevation < 1) {\n    alphaValue = 5.11916 * elevation ** 2;\n  } else {\n    alphaValue = 4.5 * Math.log(elevation + 1) + 2;\n  }\n  return (alphaValue / 100).toFixed(2);\n};\nexport default getOverlayAlpha;","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getPaperUtilityClass(slot) {\n  return generateUtilityClass('MuiPaper', slot);\n}\nconst paperClasses = generateUtilityClasses('MuiPaper', ['root', 'rounded', 'outlined', 'elevation', 'elevation0', 'elevation1', 'elevation2', 'elevation3', 'elevation4', 'elevation5', 'elevation6', 'elevation7', 'elevation8', 'elevation9', 'elevation10', 'elevation11', 'elevation12', 'elevation13', 'elevation14', 'elevation15', 'elevation16', 'elevation17', 'elevation18', 'elevation19', 'elevation20', 'elevation21', 'elevation22', 'elevation23', 'elevation24']);\nexport default paperClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\", \"component\", \"elevation\", \"square\", \"variant\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes, integerPropType } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { alpha } from '@mui/system';\nimport styled from '../styles/styled';\nimport getOverlayAlpha from '../styles/getOverlayAlpha';\nimport useThemeProps from '../styles/useThemeProps';\nimport useTheme from '../styles/useTheme';\nimport { getPaperUtilityClass } from './paperClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    square,\n    elevation,\n    variant,\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root', variant, !square && 'rounded', variant === 'elevation' && `elevation${elevation}`]\n  };\n  return composeClasses(slots, getPaperUtilityClass, classes);\n};\nconst PaperRoot = styled('div', {\n  name: 'MuiPaper',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, styles[ownerState.variant], !ownerState.square && styles.rounded, ownerState.variant === 'elevation' && styles[`elevation${ownerState.elevation}`]];\n  }\n})(({\n  theme,\n  ownerState\n}) => {\n  var _theme$vars$overlays;\n  return _extends({\n    backgroundColor: (theme.vars || theme).palette.background.paper,\n    color: (theme.vars || theme).palette.text.primary,\n    transition: theme.transitions.create('box-shadow')\n  }, !ownerState.square && {\n    borderRadius: theme.shape.borderRadius\n  }, ownerState.variant === 'outlined' && {\n    border: `1px solid ${(theme.vars || theme).palette.divider}`\n  }, ownerState.variant === 'elevation' && _extends({\n    boxShadow: (theme.vars || theme).shadows[ownerState.elevation]\n  }, !theme.vars && theme.palette.mode === 'dark' && {\n    backgroundImage: `linear-gradient(${alpha('#fff', getOverlayAlpha(ownerState.elevation))}, ${alpha('#fff', getOverlayAlpha(ownerState.elevation))})`\n  }, theme.vars && {\n    backgroundImage: (_theme$vars$overlays = theme.vars.overlays) == null ? void 0 : _theme$vars$overlays[ownerState.elevation]\n  }));\n});\nconst Paper = /*#__PURE__*/React.forwardRef(function Paper(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiPaper'\n  });\n  const {\n      className,\n      component = 'div',\n      elevation = 1,\n      square = false,\n      variant = 'elevation'\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    component,\n    elevation,\n    square,\n    variant\n  });\n  const classes = useUtilityClasses(ownerState);\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const theme = useTheme();\n    if (theme.shadows[elevation] === undefined) {\n      console.error([`MUI: The elevation provided <Paper elevation={${elevation}}> is not available in the theme.`, `Please make sure that \\`theme.shadows[${elevation}]\\` is defined.`].join('\\n'));\n    }\n  }\n  return /*#__PURE__*/_jsx(PaperRoot, _extends({\n    as: component,\n    ownerState: ownerState,\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Paper.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * Shadow depth, corresponds to `dp` in the spec.\n   * It accepts values between 0 and 24 inclusive.\n   * @default 1\n   */\n  elevation: chainPropTypes(integerPropType, props => {\n    const {\n      elevation,\n      variant\n    } = props;\n    if (elevation > 0 && variant === 'outlined') {\n      return new Error(`MUI: Combining \\`elevation={${elevation}}\\` with \\`variant=\"${variant}\"\\` has no effect. Either use \\`elevation={0}\\` or use a different \\`variant\\`.`);\n    }\n    return null;\n  }),\n  /**\n   * If `true`, rounded corners are disabled.\n   * @default false\n   */\n  square: PropTypes.bool,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The variant to use.\n   * @default 'elevation'\n   */\n  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['elevation', 'outlined']), PropTypes.string])\n} : void 0;\nexport default Paper;","import camelCase from \"camelcase\"\nimport type { IGatsbyImageData } from \"./index\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320, 654, 768, 1024, 1366, 1600, 1920, 2048, 2560, 3440, 3840, 4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n    duotone?: {\n      highlight: string\n      shadow: string\n      opacity?: number\n    }\n    grayscale?: boolean\n    rotate?: number\n    trim?: number\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  outputPixelDensities?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?: string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.slice(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout, aspectRatio: width / height }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n    placeholderURL,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n\n  if (placeholderURL) {\n    imageProps.placeholder = { fallback: placeholderURL }\n  }\n\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(`\nThe requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* global GATSBY___IMAGE */\nimport { generateImageData, EVERY_BREAKPOINT } from \"../image-utils\"\nimport type { CSSProperties, HTMLAttributes, ImgHTMLAttributes } from \"react\"\nimport type { Node } from \"gatsby\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport type {\n  IGatsbyImageHelperArgs,\n  Layout,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function gatsbyImageIsInstalled(): boolean {\n  return typeof GATSBY___IMAGE !== `undefined` && GATSBY___IMAGE\n}\n\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type IGatsbyImageParent<T = never> = T & {\n  gatsbyImage: IGatsbyImageData\n}\nexport type FileNode = Partial<Node> & {\n  childImageSharp?: IGatsbyImageDataParent<Partial<Node>>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\nconst isGatsbyImageParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageParent<T> | any\n): node is IGatsbyImageParent<T> => Boolean(node?.gatsbyImage)\n\nexport type ImageDataLike =\n  | FileNode\n  | IGatsbyImageDataParent\n  | IGatsbyImageParent\n  | IGatsbyImageData\n\nexport const getImage = (\n  node: ImageDataLike | null\n): IGatsbyImageData | undefined => {\n  // This checks both for gatsbyImageData and gatsbyImage\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  // gatsbyImageData GraphQL field\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  // gatsbyImage GraphQL field for Gatsby's Image CDN service\n  if (isGatsbyImageParent(node)) {\n    return node.gatsbyImage\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!gatsbyImageIsInstalled()) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!gatsbyImageIsInstalled()) {\n      wrapperStyle.display = `inline-block`\n      wrapperStyle.verticalAlign = `top`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `getImageData`,\n  formats = [`auto`],\n  breakpoints,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  if (\n    !breakpoints?.length &&\n    (props.layout === `fullWidth` || (props.layout as string) === `FULL_WIDTH`)\n  ) {\n    breakpoints = EVERY_BREAKPOINT\n  }\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string,\n  objectFit?: CSSProperties[\"objectFit\"],\n  objectPosition?: CSSProperties[\"objectPosition\"]\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  if (objectFit) {\n    wrapperStyle.objectFit = objectFit\n  }\n\n  if (objectPosition) {\n    wrapperStyle.objectPosition = objectPosition\n  }\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n    />\n  )\n}\n\nexport const Picture: React.FC<PictureProps> = function Picture({\n  fallback,\n  sources = [],\n  shouldLoad = true,\n  ...props\n}) {\n  const sizes = props.sizes || fallback?.sizes\n  const fallbackImage = (\n    <Image {...props} {...fallback} sizes={sizes} shouldLoad={shouldLoad} />\n  )\n\n  if (!sources.length) {\n    return fallbackImage\n  }\n\n  return (\n    <picture>\n      {sources.map(({ media, srcSet, type }) => (\n        <source\n          key={`${media}-${type}-${srcSet}`}\n          type={type}\n          media={media}\n          srcSet={shouldLoad ? srcSet : undefined}\n          data-srcset={!shouldLoad ? srcSet : undefined}\n          sizes={sizes}\n        />\n      ))}\n      {fallbackImage}\n    </picture>\n  )\n}\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React, { Fragment, FunctionComponent } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    const sources = mainImage.parentNode.querySelectorAll('source[data-srcset]');\n    for (let source of sources) {\n      source.setAttribute('srcset', source.dataset.srcset)\n      source.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n\n      // also hide the placeholder\n      mainImage.parentNode.parentNode.querySelector('[data-placeholder-image]').style.opacity = 0;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer = ``\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n\n  return sizer\n}\n\nconst Sizer: FunctionComponent<ILayoutWrapperProps> = function Sizer({\n  layout,\n  width,\n  height,\n}) {\n  if (layout === `fullWidth`) {\n    return (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n\n  if (layout === `constrained`) {\n    return (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport const LayoutWrapper: FunctionComponent<ILayoutWrapperProps> =\n  function LayoutWrapper({ children, ...props }) {\n    return (\n      <Fragment>\n        <Sizer {...props} />\n        {children}\n\n        {SERVER ? <NativeScriptLoading /> : null}\n      </Fragment>\n    )\n  }\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> =\n  function Placeholder({ fallback, ...props }) {\n    if (fallback) {\n      return (\n        <Picture\n          {...props}\n          fallback={{\n            src: fallback,\n          }}\n          aria-hidden\n          alt=\"\"\n        />\n      )\n    } else {\n      return <div {...props}></div>\n    }\n  }\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage: React.FC<PictureProps> = function MainImage(props) {\n  return (\n    <>\n      <Picture {...props} />\n      <noscript>\n        <Picture {...props} shouldLoad={true} />\n      </noscript>\n    </>\n  )\n}\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import {\n  createElement,\n  memo,\n  useMemo,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n} from \"react\"\nimport {\n  getWrapperProps,\n  gatsbyImageIsInstalled,\n  hasNativeLazyLoadSupport,\n} from \"./hooks\"\nimport { getSizer } from \"./layout-wrapper\"\nimport { propTypes } from \"./gatsby-image.server\"\nimport type {\n  FC,\n  ElementType,\n  FunctionComponent,\n  ImgHTMLAttributes,\n  CSSProperties,\n  ReactEventHandler,\n} from \"react\"\nimport type { renderImageToString } from \"./lazy-hydrate\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { Layout } from \"../image-utils\"\n\nconst imageCache = new Set<string>()\nlet renderImageToStringPromise\nlet renderImage: typeof renderImageToString | undefined\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface GatsbyImageProps\n  extends Omit<\n    ImgHTMLAttributes<HTMLImageElement>,\n    \"placeholder\" | \"onLoad\" | \"src\" | \"srcSet\" | \"width\" | \"height\"\n  > {\n  alt: string\n  as?: ElementType\n  className?: string\n  class?: string\n  imgClassName?: string\n  image: IGatsbyImageData\n  imgStyle?: CSSProperties\n  backgroundColor?: string\n  objectFit?: CSSProperties[\"objectFit\"]\n  objectPosition?: CSSProperties[\"objectPosition\"]\n  onLoad?: (props: { wasCached: boolean }) => void\n  onError?: ReactEventHandler<HTMLImageElement>\n  onStartLoad?: (props: { wasCached: boolean }) => void\n}\n\nexport interface IGatsbyImageData {\n  layout: Layout\n  width: number\n  height: number\n  backgroundColor?: string\n  images: Pick<MainImageProps, \"sources\" | \"fallback\">\n  placeholder?: Pick<PlaceholderProps, \"sources\" | \"fallback\">\n}\n\nconst GatsbyImageHydrator: FC<GatsbyImageProps> = function GatsbyImageHydrator({\n  as = `div`,\n  image,\n  style,\n  backgroundColor,\n  className,\n  class: preactClass,\n  onStartLoad,\n  onLoad,\n  onError,\n  ...props\n}) {\n  const { width, height, layout } = image\n  const {\n    style: wStyle,\n    className: wClass,\n    ...wrapperProps\n  } = getWrapperProps(width, height, layout)\n  const root = useRef<HTMLElement>()\n  const cacheKey = useMemo(() => JSON.stringify(image.images), [image.images])\n\n  // Preact uses class instead of className so we need to check for both\n  if (preactClass) {\n    className = preactClass\n  }\n\n  const sizer = getSizer(layout, width, height)\n\n  useEffect(() => {\n    if (!renderImageToStringPromise) {\n      renderImageToStringPromise = import(`./lazy-hydrate`).then(\n        ({ renderImageToString, swapPlaceholderImage }) => {\n          renderImage = renderImageToString\n\n          return {\n            renderImageToString,\n            swapPlaceholderImage,\n          }\n        }\n      )\n    }\n\n    // The plugin image component is a bit special where if it's server-side rendered, we add extra script tags to support lazy-loading without\n    // In this case we stop hydration but fire the correct events.\n    const ssrImage = root.current.querySelector(\n      `[data-gatsby-image-ssr]`\n    ) as HTMLImageElement\n    if (ssrImage && hasNativeLazyLoadSupport()) {\n      if (ssrImage.complete) {\n        // Trigger onStartload and onLoad events\n        onStartLoad?.({\n          wasCached: true,\n        })\n        onLoad?.({\n          wasCached: true,\n        })\n\n        // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n        setTimeout(() => {\n          ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n        }, 0)\n      } else {\n        onStartLoad?.({\n          wasCached: true,\n        })\n\n        ssrImage.addEventListener(`load`, function onLoadListener() {\n          ssrImage.removeEventListener(`load`, onLoadListener)\n\n          onLoad?.({\n            wasCached: true,\n          })\n          // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n          setTimeout(() => {\n            ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n          }, 0)\n        })\n      }\n\n      imageCache.add(cacheKey)\n\n      return\n    }\n\n    if (renderImage && imageCache.has(cacheKey)) {\n      return\n    }\n\n    let animationFrame\n    let cleanupCallback\n    renderImageToStringPromise.then(\n      ({ renderImageToString, swapPlaceholderImage }) => {\n        if (!root.current) {\n          return\n        }\n\n        root.current.innerHTML = renderImageToString({\n          isLoading: true,\n          isLoaded: imageCache.has(cacheKey),\n          image,\n          ...props,\n        })\n\n        if (!imageCache.has(cacheKey)) {\n          animationFrame = requestAnimationFrame(() => {\n            if (root.current) {\n              cleanupCallback = swapPlaceholderImage(\n                root.current,\n                cacheKey,\n                imageCache,\n                style,\n                onStartLoad,\n                onLoad,\n                onError\n              )\n            }\n          })\n        }\n      }\n    )\n\n    // eslint-disable-next-line consistent-return\n    return (): void => {\n      if (animationFrame) {\n        cancelAnimationFrame(animationFrame)\n      }\n      if (cleanupCallback) {\n        cleanupCallback()\n      }\n    }\n  }, [image])\n\n  // useLayoutEffect is ran before React commits to the DOM. This allows us to make sure our HTML is using our cached image version\n  useLayoutEffect(() => {\n    if (imageCache.has(cacheKey) && renderImage) {\n      root.current.innerHTML = renderImage({\n        isLoading: imageCache.has(cacheKey),\n        isLoaded: imageCache.has(cacheKey),\n        image,\n        ...props,\n      })\n\n      // Trigger onStartload and onLoad events\n      onStartLoad?.({\n        wasCached: true,\n      })\n      onLoad?.({\n        wasCached: true,\n      })\n    }\n  }, [image])\n\n  // By keeping all props equal React will keep the component in the DOM\n  return createElement(as, {\n    ...wrapperProps,\n    style: {\n      ...wStyle,\n      ...style,\n      backgroundColor,\n    },\n    className: `${wClass}${className ? ` ${className}` : ``}`,\n    ref: root,\n    dangerouslySetInnerHTML: {\n      __html: sizer,\n    },\n    suppressHydrationWarning: true,\n  })\n}\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> = memo(\n  function GatsbyImage(props) {\n    if (!props.image) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(`[gatsby-plugin-image] Missing image prop`)\n      }\n\n      return null\n    }\n\n    if (!gatsbyImageIsInstalled() && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `[gatsby-plugin-image] You're missing out on some cool performance features. Please add \"gatsby-plugin-image\" to your gatsby-config.js`\n      )\n    }\n\n    return createElement(GatsbyImageHydrator, props)\n  }\n)\n\nGatsbyImage.propTypes = propTypes\nGatsbyImage.displayName = `GatsbyImage`\n","import React from \"react\"\nimport { getWrapperProps, getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage, MainImageProps } from \"./main-image\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport PropTypes from \"prop-types\"\nimport type { FunctionComponent, WeakValidationMap } from \"react\"\nimport type { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\n\nconst removeNewLines = (str: string): string => str.replace(/\\n/g, ``)\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> =\n  function GatsbyImage({\n    as = `div`,\n    className,\n    class: preactClass,\n    style,\n    image,\n    loading = `lazy`,\n    imgClassName,\n    imgStyle,\n    backgroundColor,\n    objectFit,\n    objectPosition,\n    ...props\n  }) {\n    if (!image) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n      return null\n    }\n\n    if (preactClass) {\n      className = preactClass\n    }\n\n    imgStyle = {\n      objectFit,\n      objectPosition,\n      backgroundColor,\n      ...imgStyle,\n    }\n\n    const {\n      width,\n      height,\n      layout,\n      images,\n      placeholder,\n      backgroundColor: placeholderBackgroundColor,\n    } = image\n\n    const {\n      style: wStyle,\n      className: wClass,\n      ...wrapperProps\n    } = getWrapperProps(width, height, layout)\n\n    const cleanedImages: IGatsbyImageData[\"images\"] = {\n      fallback: undefined,\n      sources: [],\n    }\n    if (images.fallback) {\n      cleanedImages.fallback = {\n        ...images.fallback,\n        srcSet: images.fallback.srcSet\n          ? removeNewLines(images.fallback.srcSet)\n          : undefined,\n      }\n    }\n\n    if (images.sources) {\n      cleanedImages.sources = images.sources.map(source => {\n        return {\n          ...source,\n          srcSet: removeNewLines(source.srcSet),\n        }\n      })\n    }\n\n    return React.createElement(\n      as,\n      {\n        ...wrapperProps,\n        style: {\n          ...wStyle,\n          ...style,\n          backgroundColor,\n        },\n        className: `${wClass}${className ? ` ${className}` : ``}`,\n      },\n      <LayoutWrapper layout={layout} width={width} height={height}>\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            false,\n            layout,\n            width,\n            height,\n            placeholderBackgroundColor,\n            objectFit,\n            objectPosition\n          )}\n        />\n\n        <MainImage\n          data-gatsby-image-ssr=\"\"\n          className={imgClassName}\n          {...(props as Omit<\n            MainImageProps,\n            \"images\" | \"fallback\" | \"onError\" | \"onLoad\"\n          >)}\n          // When eager is set we want to start the isLoading state on true (we want to load the img without react)\n          {...getMainProps(\n            loading === `eager`,\n            false,\n            cleanedImages,\n            loading,\n            imgStyle\n          )}\n        />\n      </LayoutWrapper>\n    )\n  }\n\nexport const altValidator: PropTypes.Validator<string> = (\n  props: GatsbyImageProps,\n  propName,\n  componentName,\n  ...rest\n): Error | undefined => {\n  if (!props.alt && props.alt !== ``) {\n    return new Error(\n      `The \"alt\" prop is required in ${componentName}. If the image is purely presentational then pass an empty string: e.g. alt=\"\". Learn more: https://a11y-style-guide.com/style-guide/section-media.html`\n    )\n  }\n\n  return PropTypes.string(props, propName, componentName, ...rest)\n}\n\nexport const propTypes = {\n  image: PropTypes.object.isRequired,\n  alt: altValidator,\n} as WeakValidationMap<GatsbyImageProps>\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport {\n  altValidator,\n  GatsbyImage as GatsbyImageServer,\n} from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    breakpoints,\n    outputPixelDensities,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: altValidator,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import {\n  GatsbyImage as GatsbyImageBrowser,\n  IGatsbyImageData,\n} from \"./gatsby-image.browser\"\nimport React from \"react\"\nimport {\n  _getStaticImage,\n  propTypes,\n  IStaticImageProps,\n} from \"./static-image.server\"\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageBrowser)\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","'use strict';\n\nconst preserveCamelCase = string => {\n\tlet isLastCharLower = false;\n\tlet isLastCharUpper = false;\n\tlet isLastLastCharUpper = false;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst character = string[i];\n\n\t\tif (isLastCharLower && /[a-zA-Z]/.test(character) && character.toUpperCase() === character) {\n\t\t\tstring = string.slice(0, i) + '-' + string.slice(i);\n\t\t\tisLastCharLower = false;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = true;\n\t\t\ti++;\n\t\t} else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(character) && character.toLowerCase() === character) {\n\t\t\tstring = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = false;\n\t\t\tisLastCharLower = true;\n\t\t} else {\n\t\t\tisLastCharLower = character.toLowerCase() === character && character.toUpperCase() !== character;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = character.toUpperCase() === character && character.toLowerCase() !== character;\n\t\t}\n\t}\n\n\treturn string;\n};\n\nconst camelCase = (input, options) => {\n\tif (!(typeof input === 'string' || Array.isArray(input))) {\n\t\tthrow new TypeError('Expected the input to be `string | string[]`');\n\t}\n\n\toptions = Object.assign({\n\t\tpascalCase: false\n\t}, options);\n\n\tconst postProcess = x => options.pascalCase ? x.charAt(0).toUpperCase() + x.slice(1) : x;\n\n\tif (Array.isArray(input)) {\n\t\tinput = input.map(x => x.trim())\n\t\t\t.filter(x => x.length)\n\t\t\t.join('-');\n\t} else {\n\t\tinput = input.trim();\n\t}\n\n\tif (input.length === 0) {\n\t\treturn '';\n\t}\n\n\tif (input.length === 1) {\n\t\treturn options.pascalCase ? input.toUpperCase() : input.toLowerCase();\n\t}\n\n\tconst hasUpperCase = input !== input.toLowerCase();\n\n\tif (hasUpperCase) {\n\t\tinput = preserveCamelCase(input);\n\t}\n\n\tinput = input\n\t\t.replace(/^[_.\\- ]+/, '')\n\t\t.toLowerCase()\n\t\t.replace(/[_.\\- ]+(\\w|$)/g, (_, p1) => p1.toUpperCase())\n\t\t.replace(/\\d+(\\w|$)/g, m => m.toUpperCase());\n\n\treturn postProcess(input);\n};\n\nmodule.exports = camelCase;\n// TODO: Remove this for the next major release\nmodule.exports.default = camelCase;\n","import { jsx as b } from \"react/jsx-runtime\";\nimport { useState as h, useEffect as j } from \"react\";\nfunction y({ id: e, host: i, repo: o, repoId: r, category: n, categoryId: u, mapping: s, term: a, strict: d, reactionsEnabled: f, emitMetadata: m, inputPosition: c, theme: p, lang: l, loading: g }) {\n  const [t, x] = h(!1);\n  return j(() => {\n    t || import(\"./giscus-Ci9LqPcC.js\").then(() => x(!0));\n  }, []), t ? b(\"giscus-widget\", { id: e, host: i, repo: o, repoid: r, category: n, categoryid: u, mapping: s, term: a, strict: d, reactionsenabled: f, emitmetadata: m, inputposition: c, theme: p, lang: l, loading: g }) : null;\n}\nexport {\n  y as default\n};\n","import React from \"react\"\nimport {graphql} from \"gatsby\"\nimport { Box, Container, Grid, Paper } from \"@mui/material\";\nimport { styled } from '@mui/material/styles';\nimport Section from \"../components/Section\";\nimport Footer from \"../components/Footer\";\nimport {GatsbyImage, getImage} from \"gatsby-plugin-image\";\nimport readingTime from \"../utils/readingTime\";\nimport Giscus from \"@giscus/react\";\n\n// A huge thanks for Project medium.css: https://github.com/lucagez/medium.css\nconst BlogContent = styled('div')(() => ({\n  width: 740,\n  \"& h2\": {\n    fontFamily: \"Lato\",\n    fontSize: 26,\n    fontWeight: 700,\n    padding: 0,\n    margin: \"56px 0 -13px -1.883px\",\n    textAlign: \"left\",\n    lineHeight: \"34.5px\",\n    letterSpacing: -0.45,\n  },\n  \"& p\": {\n    marginTop: 21,\n    fontFamily: \"Lora\",\n    fontSize: 21,\n    letterSpacing: -0.03,\n    lineHeight: 1.58,\n  },\n  \"& li\": {\n    fontFamily: \"Lora\",\n    fontSize: 21,\n    letterSpacing: -0.03,\n    lineHeight: 1.58,\n  },\n  \"& pre\": {\n    overflowX: \"auto\",\n    fontFamily: \"Solaris\",\n    fontStyle: \"italic\",\n    letterSpacing: -0.36,\n    margin: \"45px 0 23px 0\",\n    color: \"rgba(0, 0, 0, 0.68)\",\n    backgroundColor: \"rgba(240,240,240,0.68)\"\n  }\n}));\n\nexport default function Template({data}) {\n  const {markdownRemark} = data // data.markdownRemark holds your post data\n  const {frontmatter, html, rawMarkdownBody} = markdownRemark\n  const readMinutes = readingTime(rawMarkdownBody);\n\n  return (\n    <React.Fragment>\n      <Container maxWidth=\"lg\">\n        <Section/>\n        <main>\n          <Grid container spacing={1} sx={{marginTop: 5, marginBottom: 5}}>\n            <Grid item xs={6}>\n              <Box sx={{padding: '6 6 0 0'}}>\n                <h1 style={{\n                  fontFamily: \"Playfair Display\",\n                  fontSize: 48,\n                  textAlign: \"left\",\n                  marginBottom: 8\n                }}>{frontmatter.title}</h1>\n                <subtitle style={{\n                  fontFamily: \"Lato\",\n                  fontSize: 21,\n                  color: \"rgba(0, 0, 0, 0.54)\",\n                }}>\n                  {frontmatter.excerpt}\n                </subtitle>\n                <Box sx={{\n                  fontFamily: \"Lato\",\n                  fontSize: 16,\n                  fontWeight: 400,\n                  marginTop: 2\n                }}>\n                  <a href=\"https://reata.github.io/\">Reata</a>\n                </Box>\n                <Box sx={{color: \"rgba(0, 0, 0, 0.54)\"}}>\n                  {frontmatter.date} <span className=\"median-divider\">·</span> {readMinutes} min\n                  read\n                </Box>\n              </Box>\n            </Grid>\n            <Grid item xs={6}>\n              <Paper>\n                <GatsbyImage alt=\"\" image={getImage(frontmatter.image)}/>\n              </Paper>\n            </Grid>\n          </Grid>\n          <Grid container justifyContent=\"center\" alignItems=\"center\">\n            <BlogContent>\n              <Box dangerouslySetInnerHTML={{__html: html}}/>\n            </BlogContent>\n          </Grid>\n          <Grid>\n            <Giscus\n                id=\"comment\"\n                repo=\"reata/reata.github.io\"\n                repoId=\"MDEwOlJlcG9zaXRvcnk3ODg0OTA1MQ==\"\n                category=\"Announcements\"\n                categoryId=\"DIC_kwDOBLMkG84Cq411\"\n                mapping=\"pathname\"\n                strict=\"0\"\n                reactionsEnabled=\"0\"\n                emitMetadata=\"0\"\n                inputPosition=\"top\"\n                theme=\"light\"\n                lang=\"zh-CN\"\n                loading=\"lazy\"\n                async>\n            </Giscus>\n          </Grid>\n        </main>\n      </Container>\n      <Footer/>\n    </React.Fragment>\n  );\n}\n\nexport const pageQuery = graphql`\n  query($id: String!) {\n    markdownRemark(id: { eq: $id }) {\n      html\n      rawMarkdownBody\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        slug\n        title\n        excerpt\n        image {\n          childImageSharp {\n            gatsbyImageData(\n              height: 1600\n            )\n          }\n        }\n      }\n    }\n  }\n`\n","// reading speed set as 500 Chinese character per minute\nconst readingTime = (text) => Math.ceil(text.length / 500);\n\nexport default readingTime;\n"],"names":["_excluded","Box","options","defaultTheme","defaultClassName","generateClassName","styleFunctionSx","BoxRoot","shouldForwardProp","prop","inProps","ref","theme","useTheme","_extendSxProp","extendSxProp","className","component","other","as","createBox","ClassNameGenerator","generate","elevation","alphaValue","Math","log","toFixed","getPaperUtilityClass","slot","generateUtilityClass","generateUtilityClasses","PaperRoot","styled","name","overridesResolver","props","styles","ownerState","root","variant","square","rounded","_theme$vars$overlays","backgroundColor","vars","palette","background","paper","color","text","primary","transition","transitions","create","borderRadius","shape","border","divider","boxShadow","shadows","mode","backgroundImage","overlays","useThemeProps","classes","slots","composeClasses","useUtilityClasses","height","prototype","node","images","_node$images","fallback","_node$images$fallback","src","Boolean","gatsbyImageData","gatsbyImage","childImageSharp","_node$childImageSharp","format","isLoading","isLoaded","loading","style","shouldLoad","opacity","placeholder","layout","width","objectFit","objectPosition","wrapperStyle","position","top","left","bottom","right","sources","fallbackImage","paddingTop","maxWidth","display","React","alt","role","a","children","Fragment","Sizer","t","srcSet","decoding","undefined","sizes","Image","length","map","media","type","key","propTypes","PropTypes","isRequired","Picture","displayName","Placeholder","_Picture$propTypes","propName","componentName","MainImage","rest","string","image","altValidator","Set","e","onError","preactClass","class","onStartLoad","onLoad","overflow","wStyle","wClass","wrapperProps","useRef","useMemo","JSON","stringify","sizer","useEffect","renderImageToStringPromise","import","then","renderImageToString","swapPlaceholderImage","renderImage","current","querySelector","ssrImage","hasNativeLazyLoadSupport","complete","wasCached","setTimeout","removeAttribute","addEventListener","removeEventListener","onLoadListener","imageCache","add","cacheKey","has","innerHTML","animationFrame","requestAnimationFrame","cleanupCallback","cancelAnimationFrame","useLayoutEffect","dangerouslySetInnerHTML","__html","suppressHydrationWarning","memo","warn","GatsbyImageHydrator","GatsbyImage","number","checkDimensionProps","validLayouts","Error","GatsbyImageBrowser","__error","imageData","__imageData","console","StaticImage","camelCase","input","Array","isArray","TypeError","Object","assign","pascalCase","x","trim","filter","join","toUpperCase","toLowerCase","isLastCharLower","isLastCharUpper","isLastLastCharUpper","i","character","test","slice","preserveCamelCase","replace","_","p1","m","charAt","module","exports","y","id","host","repo","o","repoId","r","category","n","categoryId","u","mapping","s","term","strict","d","reactionsEnabled","f","emitMetadata","inputPosition","c","p","lang","l","g","repoid","categoryid","reactionsenabled","emitmetadata","inputposition","BlogContent","fontFamily","fontSize","fontWeight","padding","margin","textAlign","lineHeight","letterSpacing","marginTop","overflowX","fontStyle","Template","data","markdownRemark","frontmatter","html","rawMarkdownBody","readMinutes","readingTime","Container","Section","Grid","container","spacing","sx","marginBottom","item","xs","title","excerpt","href","date","Paper","getImage","justifyContent","alignItems","Giscus","async","Footer","ceil"],"sourceRoot":""}